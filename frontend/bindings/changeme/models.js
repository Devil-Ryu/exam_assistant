// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * SearchAnswers 搜索答案
 * AccuracyFilters 准确度筛选参数
 */
export class AccuracyFilters {
    /**
     * Creates a new AccuracyFilters instance.
     * @param {Partial<AccuracyFilters>} [$$source = {}] - The source object to create the AccuracyFilters.
     */
    constructor($$source = {}) {
        if (!("high" in $$source)) {
            /**
             * 高准确率 (≥80%)
             * @member
             * @type {boolean}
             */
            this["high"] = false;
        }
        if (!("medium" in $$source)) {
            /**
             * 中准确率 (50%-79%)
             * @member
             * @type {boolean}
             */
            this["medium"] = false;
        }
        if (!("low" in $$source)) {
            /**
             * 低准确率 (<50%)
             * @member
             * @type {boolean}
             */
            this["low"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AccuracyFilters instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AccuracyFilters}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AccuracyFilters(/** @type {Partial<AccuracyFilters>} */($$parsedSource));
    }
}

/**
 * AnswerItem 答案项
 */
export class AnswerItem {
    /**
     * Creates a new AnswerItem instance.
     * @param {Partial<AnswerItem>} [$$source = {}] - The source object to create the AnswerItem.
     */
    constructor($$source = {}) {
        if (!("type" in $$source)) {
            /**
             * 题目类型
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("question" in $$source)) {
            /**
             * 题目内容
             * @member
             * @type {string}
             */
            this["question"] = "";
        }
        if (!("options" in $$source)) {
            /**
             * 选项
             * @member
             * @type {string[]}
             */
            this["options"] = [];
        }
        if (!("answer" in $$source)) {
            /**
             * 答案
             * @member
             * @type {string[]}
             */
            this["answer"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AnswerItem instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AnswerItem}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType0;
        const $$createField3_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("options" in $$parsedSource) {
            $$parsedSource["options"] = $$createField2_0($$parsedSource["options"]);
        }
        if ("answer" in $$parsedSource) {
            $$parsedSource["answer"] = $$createField3_0($$parsedSource["answer"]);
        }
        return new AnswerItem(/** @type {Partial<AnswerItem>} */($$parsedSource));
    }
}

/**
 * FileDialogResult 文件对话框结果
 */
export class FileDialogResult {
    /**
     * Creates a new FileDialogResult instance.
     * @param {Partial<FileDialogResult>} [$$source = {}] - The source object to create the FileDialogResult.
     */
    constructor($$source = {}) {
        if (!("filePath" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["filePath"] = "";
        }
        if (!("success" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["success"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["error"] = undefined;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FileDialogResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {FileDialogResult}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new FileDialogResult(/** @type {Partial<FileDialogResult>} */($$parsedSource));
    }
}

/**
 * OCRConfig OCR配置
 */
export class OCRConfig {
    /**
     * Creates a new OCRConfig instance.
     * @param {Partial<OCRConfig>} [$$source = {}] - The source object to create the OCRConfig.
     */
    constructor($$source = {}) {
        if (!("mode" in $$source)) {
            /**
             * "online" 或 "local"
             * @member
             * @type {string}
             */
            this["mode"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * 在线OCR URL
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("apiKey" in $$source)) {
            /**
             * API密钥
             * @member
             * @type {string}
             */
            this["apiKey"] = "";
        }
        if (!("status" in $$source)) {
            /**
             * 连接状态
             * @member
             * @type {string}
             */
            this["status"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OCRConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {OCRConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new OCRConfig(/** @type {Partial<OCRConfig>} */($$parsedSource));
    }
}

/**
 * ScreenshotArea 截图区域
 */
export class ScreenshotArea {
    /**
     * Creates a new ScreenshotArea instance.
     * @param {Partial<ScreenshotArea>} [$$source = {}] - The source object to create the ScreenshotArea.
     */
    constructor($$source = {}) {
        if (!("x" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["x"] = 0;
        }
        if (!("y" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["y"] = 0;
        }
        if (!("width" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["width"] = 0;
        }
        if (!("height" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["height"] = 0;
        }
        if (!("image" in $$source)) {
            /**
             * base64编码的图片
             * @member
             * @type {string}
             */
            this["image"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScreenshotArea instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ScreenshotArea}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ScreenshotArea(/** @type {Partial<ScreenshotArea>} */($$parsedSource));
    }
}

/**
 * SearchResult 搜索结果
 */
export class SearchResult {
    /**
     * Creates a new SearchResult instance.
     * @param {Partial<SearchResult>} [$$source = {}] - The source object to create the SearchResult.
     */
    constructor($$source = {}) {
        if (!("item" in $$source)) {
            /**
             * @member
             * @type {AnswerItem}
             */
            this["item"] = (new AnswerItem());
        }
        if (!("score" in $$source)) {
            /**
             * 匹配度
             * @member
             * @type {number}
             */
            this["score"] = 0;
        }
        if (!("matched" in $$source)) {
            /**
             * 匹配的文本
             * @member
             * @type {string}
             */
            this["matched"] = "";
        }
        if (!("questionMatches" in $$source)) {
            /**
             * 题目匹配位置
             * @member
             * @type {number[]}
             */
            this["questionMatches"] = [];
        }
        if (!("optionMatches" in $$source)) {
            /**
             * 选项匹配位置，key为选项文本
             * @member
             * @type {{ [_: string]: number[] }}
             */
            this["optionMatches"] = {};
        }
        if (!("answerMatches" in $$source)) {
            /**
             * 答案匹配位置（不使用）
             * @member
             * @type {number[]}
             */
            this["answerMatches"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SearchResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SearchResult}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType1;
        const $$createField3_0 = $$createType2;
        const $$createField4_0 = $$createType3;
        const $$createField5_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("item" in $$parsedSource) {
            $$parsedSource["item"] = $$createField0_0($$parsedSource["item"]);
        }
        if ("questionMatches" in $$parsedSource) {
            $$parsedSource["questionMatches"] = $$createField3_0($$parsedSource["questionMatches"]);
        }
        if ("optionMatches" in $$parsedSource) {
            $$parsedSource["optionMatches"] = $$createField4_0($$parsedSource["optionMatches"]);
        }
        if ("answerMatches" in $$parsedSource) {
            $$parsedSource["answerMatches"] = $$createField5_0($$parsedSource["answerMatches"]);
        }
        return new SearchResult(/** @type {Partial<SearchResult>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = AnswerItem.createFrom;
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $Create.Map($Create.Any, $$createType2);
